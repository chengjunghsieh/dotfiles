{
   "base": {
    "prefix": "cp-template",
    "body": [
      "// {{{ by unolight",
      "#include <bits/stdc++.h>",
      "#include <unistd.h>",
      "#pragma GCC diagnostic ignored \"-Wunused-result\"",
      "#pragma GCC diagnostic ignored \"-Wunused-function\"",
      "#define SZ(x) ((int)(x).size())",
      "#define ALL(x) begin(x), end(x)",
      "#define RALL(x) rbegin(x), rend(x)",
      "#define REP(i, n) for (int i = 0; i < int(n); i++)",
      "#define REP1(i, a, b) for (int i = (a); i <= int(b); i++)",
      "#define MP make_pair",
      "#define PB push_back",
      "using namespace std;",
      "typedef int64_t LL;",
      "typedef pair<int, int> PII;",
      "typedef vector<int> VI;",
      "",
      "namespace {",
      "namespace unolight {",
      "// Read Input",
      "template <class T> void _R(T &x) { cin >> x; }",
      "void _R(int &x) { scanf(\"%d\", &x); }",
      "void _R(int64_t &x) { scanf(\"%\" PRId64, &x); }",
      "void _R(double &x) { scanf(\"%lf\", &x); }",
      "void _R(char &x) { scanf(\" %c\", &x); }",
      "void _R(char *x) { scanf(\"%s\", x); }",
      "void R() {}",
      "template <class T, class... U> void R(T &head, U &...tail) {",
      "\t_R(head);",
      "\tR(tail...);",
      "}",
      "// Write Output",
      "template <class T> void _W(const T &x) { cout << x; }",
      "void _W(const int &x) { printf(\"%d\", x); }",
      "void _W(const int64_t &x) { printf(\"%\" PRId64, x); }",
      "void _W(const double &x) { printf(\"%.16f\", x); }",
      "void _W(const char &x) { putchar(x); }",
      "void _W(const char *x) { printf(\"%s\", x); }",
      "template <class T> void _W(const vector<T> &x) {",
      "\tfor (auto i = x.begin(); i != x.end(); _W(*i++))",
      "\t\tif (i != x.cbegin())",
      "\t\t\tputchar(' ');",
      "}",
      "void W() {}",
      "template <class T, class... U> void W(const T &head, const U &...tail) {",
      "\t_W(head);",
      "\tputchar(sizeof...(tail) ? ' ' : '\\n');",
      "\tW(tail...);",
      "}",
      "",
      "#ifdef UNOLIGHT",
      "#include \"dump.hpp\"",
      "#else",
      "#define dump(...)",
      "#endif",
      "",
      "template <class T> inline bool chmax(T &a, const T &b) {",
      "\treturn b > a ? a = b, true : false;",
      "}",
      "template <class T> inline bool chmin(T &a, const T &b) {",
      "\treturn b < a ? a = b, true : false;",
      "}",
      "template <class T> using MaxHeap = priority_queue<T>;",
      "template <class T> using MinHeap = priority_queue<T, vector<T>, greater<T>>;",
      "template <class T, class F = less<T>> void sort_uniq(vector<T> &v, F f = F()) {",
      "\tsort(begin(v), end(v), f);",
      "\tv.resize(unique(begin(v), end(v)) - begin(v));",
      "}",
      "// }}}",
      "",
      "void main() {$0}",
      "",
      "// {{{ main",
      "} // namespace unolight",
      "} // namespace",
      "int main() {",
      "\tunolight::main();",
      "\treturn 0;",
      "}",
      "// }}}",
      "",
      ""
    ],
    "description": "template for competitive programming"
  } 
}
